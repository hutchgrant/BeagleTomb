Description: Upstream changes introduced in version 0.1.6-0ubuntu1~9
 This patch has been created by dpkg-source during the package build.
 Here's the last changelog entry, hopefully it gives details on why
 those changes were made:
 .
 beagletomb (0.1.6-0ubuntu1~9) natty; urgency=low
 .
   * Update: Fixed database read dynamic memory allocation. Now handles larger, more dynamic, data set (Closes: #nnnn)
 .
 The person named in the Author field signed this changelog entry.
Author: Grant Hutchinson <h.g.utchinson@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- beagletomb-0.1.6.orig/changelog
+++ beagletomb-0.1.6/changelog
@@ -1,3 +1,9 @@
+beagletomb (0.1.6-0ubuntu1~9) natty; urgency=low
+
+  * Update: Fixed database read dynamic memory allocation. Now handles larger, more dynamic, data set (Closes: #nnnn)
+
+ -- Grant Hutchinson <h.g.utchinson@gmail.com>  Tues, 28 Mar 2012 05:59:22 -0500
+
 beagletomb (0.1.6-0ubuntu1~8) natty; urgency=low
 
   * Update: Fixed dynamic memory allocation, sync improved (Closes: #nnnn)
--- beagletomb-0.1.6.orig/src/readDB.h
+++ beagletomb-0.1.6/src/readDB.h
@@ -25,31 +25,29 @@
 #ifndef READDB_H_
 #define READDB_H_
 #define MAX 10000
-#include "songObj.h"
 #include "radioObj.h"
 #include <stdlib.h>
 #include <stdio.h>
 #include <iostream>
 #include <cstring>
 #include <QtSql>
+#include "fileobj.h"
 using namespace std;
 class readDB {
-
-        songObj *Artist, *Album, *Song, *Video, *VidDir;
         radioObj play_list;
         char *DBlocation2;
 
 public:
         QSqlDatabase db2;
         readDB(const char *dbLocation);
-	songObj* SongFill(int *songSize);
-	songObj* AlbumFill(int *albSize);
-	songObj* ArtistFill(int *artSize);
-        songObj* VidDirFill(int *vidDirSize);
-        songObj* VideoFill(int *vidSize);
+        fileObj& SongFill(fileObj& Song);
+        fileObj& AlbumFill(fileObj& Album);
+        fileObj& ArtistFill(fileObj& Artist);
+        fileObj& VidDirFill(fileObj& VidDir);
+        fileObj& VideoFill(fileObj& Video);
        radioObj RadioFill( int *radSize);
        void OpenDB();
-	void display(int artSize, int albSize, int songSize);
+        void display(fileObj&Artist, fileObj& Song,fileObj& Album);
 	virtual ~readDB();
 };
 
--- beagletomb-0.1.6.orig/src/beaglemain.h
+++ beagletomb-0.1.6/src/beaglemain.h
@@ -62,7 +62,7 @@ public:
     openplaylist openPL;
     QMPwidget widget;
     mplayCon mplay;
-    songObj* Artist, *Song, *Album, *VidDir, *Video;
+    fileObj Artist, Song, Album, VidDir, Video;
     radioObj Radio;
     int artSize, albSize, songSize, vidSize, vidDirSize, radSize;
 
--- beagletomb-0.1.6.orig/src/readDB.cpp
+++ beagletomb-0.1.6/src/readDB.cpp
@@ -24,29 +24,6 @@
 readDB::readDB(const char *dbLocation) {
     DBlocation2 = new char[strlen(dbLocation) + 1];
     strcpy(DBlocation2, dbLocation);
-
-    Artist = new songObj[MAX];
-    for(int i = 0; i<= MAX; i++){
-        Artist[i].set("-",0,0);
-    }
-
-    Album = new songObj[MAX];
-    for(int i = 0; i<= MAX; i++){
-        Album[i].set("-",0,0);
-    }
-    Song = new songObj[MAX];
-    for(int i = 0; i<= MAX; i++){
-        Song[i].set("-", 0, 0);
-    }
-    VidDir = new songObj[MAX];
-    for(int i = 0; i<= MAX; i++){
-        VidDir[i].set("-", 0, 0);
-    }
-    Video = new songObj[MAX];
-    for(int i = 0; i<= MAX; i++){
-        Video[i].set("-", 0, 0);
-    }
-
 }
 
 void readDB::OpenDB(){
@@ -55,7 +32,7 @@ void readDB::OpenDB(){
 
 }
 
-songObj* readDB::SongFill(int *songSize){
+fileObj& readDB::SongFill(fileObj& Song){
     int count = 0;
      if(db2.open()){
        QSqlQuery query(db2);
@@ -68,21 +45,16 @@ songObj* readDB::SongFill(int *songSize)
          QString QVal3 = query.value(3).toString();
 
          if(QVal2.toInt() != 0){
-             string QstrConvert = QVal1.toStdString();
-             char *QVal1Convert;
-             QVal1Convert = new char[QstrConvert.length() + 1];
-             strcpy(QVal1Convert, QstrConvert.c_str());
-             Song[count].set(QVal1Convert, QVal2.toInt(), QVal3.toInt());
+             Song.set(count, QVal2.toInt(), QVal3.toInt(), QVal1.toStdString().c_str());
              count++;
          }
      }
-     *songSize = count;
      db2.close();
     }
     return Song;
 }
 
-songObj* readDB::AlbumFill(int *albSize){
+fileObj& readDB::AlbumFill(fileObj& Album){
 
     int count = 0;
      if(db2.open()){
@@ -95,21 +67,16 @@ songObj* readDB::AlbumFill(int *albSize)
                 QString QVal3 = query.value(3).toString();
 
                 if(QVal2.toInt() != 0){
-                    string QstrConvert = QVal1.toStdString();
-                    char *QVal1Convert;
-                    QVal1Convert = new char[QstrConvert.length() + 1];
-                    strcpy(QVal1Convert, QstrConvert.c_str());
-                    Album[count].set(QVal1Convert, QVal2.toInt(), QVal3.toInt());
+                    Album.set(count, QVal2.toInt(), QVal3.toInt(), QVal1.toStdString().c_str());
                     count++;
                 }
             }
-            *albSize = count;
              db2.close();
     }
     return Album;
 }
 
-songObj* readDB::ArtistFill( int *artSize){
+fileObj& readDB::ArtistFill(fileObj& Artist){
     OpenDB();
     int count = 0;
     if(db2.open()){
@@ -122,20 +89,15 @@ songObj* readDB::ArtistFill( int *artSiz
                 QString QVal3 = query.value(3).toString();
 
                 if(QVal2.toInt() != 0){
-                    string QstrConvert = QVal1.toStdString();
-                    char *QVal1Convert;
-                    QVal1Convert = new char[QstrConvert.length() + 1];
-                    strcpy(QVal1Convert, QstrConvert.c_str());
-                    Artist[count].set(QVal1Convert, QVal2.toInt(), QVal3.toInt());
+                    Artist.set(count, QVal2.toInt(), QVal3.toInt(), QVal1.toStdString().c_str());
                     count++;
                 }
             }
-            *artSize = count;
              db2.close();
     }
     return Artist;
 }
-songObj* readDB::VidDirFill( int *vidDirSize){
+fileObj& readDB::VidDirFill( fileObj& VidDir){
 
     int count = 0;
     if(db2.open()){
@@ -152,16 +114,15 @@ songObj* readDB::VidDirFill( int *vidDir
                     char *QVal1Convert;
                     QVal1Convert = new char[QstrConvert.length() + 1];
                     strcpy(QVal1Convert, QstrConvert.c_str());
-                    VidDir[count].set(QVal1Convert, QVal2.toInt(), QVal3.toInt());
+                    VidDir.set(count, QVal2.toInt(), QVal3.toInt(), QVal1.toStdString().c_str());
                     count++;
                 }
             }
-            *vidDirSize = count;
              db2.close();
     }
     return VidDir;
 }
-songObj* readDB::VideoFill( int *vidSize){
+fileObj& readDB::VideoFill( fileObj& Video){
 
     int count = 0;
     if(db2.open()){
@@ -178,11 +139,10 @@ songObj* readDB::VideoFill( int *vidSize
                     char *QVal1Convert;
                     QVal1Convert = new char[QstrConvert.length() + 1];
                     strcpy(QVal1Convert, QstrConvert.c_str());
-                    Video[count].set(QVal1Convert, QVal2.toInt(), QVal3.toInt());
+                    Video.set(count, QVal2.toInt(), QVal3.toInt(), QVal1.toStdString().c_str());
                     count++;
                 }
             }
-            *vidSize = count;
              db2.close();
     }
     return Video;
@@ -222,7 +182,7 @@ radioObj readDB::RadioFill(int *radSize)
 
 }
 
-void readDB::display(int artSize, int albSize, int songSize){
+void readDB::display( fileObj&Artist, fileObj& Song,fileObj& Album ){
     int choice = 0;
     bool Exit = 0;
     while(!Exit){
@@ -232,22 +192,16 @@ void readDB::display(int artSize, int al
 	cin >> choice;
 
 	if(choice == 1){
-            for(int i = 0; i<=artSize; i++){
-                cout << Artist[i];
-            }
-            cout << "total artists: " << artSize;
+            Artist.display();
+            cout << "total artists: " << Artist.getSize();
 	}
 	if(choice == 2){
-            for(int i = 0; i<=albSize; i++){
-                cout << Album[i];
-            }
-            cout << "Total Albums: " << albSize;
+            Album.display();
+            cout << "Total Albums: " << Album.getSize();
 	}
 	if(choice == 3){
-            for(int i = 0; i<=songSize; i++){
-                cout << Song[i];
-            }
-            cout << "Total Songs: " << songSize;
+            Song.display();
+            cout << "Total Songs: " << Song.getSize();
 	}
 	if(choice == 4){
             Exit = 1;
--- beagletomb-0.1.6.orig/src/fileobj.cpp
+++ beagletomb-0.1.6/src/fileobj.cpp
@@ -108,3 +108,53 @@ fileObj& fileObj::operator=(const fileOb
      return *this;
 
 }
+
+
+/*
+  *  Search any Object for a track name by the using the ID
+  */
+char* checkSongObjByID(int id, fileObj& src){
+    char *FinSong;
+    if(src.getSize() > 0){
+        for(int i = 0; i< src.getSize(); i++){
+            if(src.getID(i) == id){
+
+                FinSong = new char[strlen(src.getName(i))+1];
+                strcpy(FinSong,src.getName(i));
+            }
+        }
+    }
+    return FinSong;
+}
+
+/*
+  *  Search any Object for a track ID by the using the parent
+  */
+int checkSongObjIDbyPar(int par, fileObj& src){
+    int FinID = 0;
+    if(src.getSize() > 0){
+        for(int i = 0; i< src.getSize(); i++){
+            if(src.getPar(i) == par){
+
+                FinID = src.getID(i);
+            }
+        }
+    }
+    return FinID;
+}
+
+/*
+  *  Search any Object for a track Par by the using the ID
+  */
+int checkSongObjParByID(int id, fileObj& src){
+    int FinPar;
+    if(src.getSize() > 0){
+        for(int i = 0; i< src.getSize(); i++){
+            if(src.getID(i) == id){
+
+                FinPar = src.getPar(i);
+            }
+        }
+    }
+    return FinPar;
+}
--- beagletomb-0.1.6.orig/src/fileobj.h
+++ beagletomb-0.1.6/src/fileobj.h
@@ -86,6 +86,12 @@ public:
         objSize = 0;
         delete [] fileName;
     }
+
+
 };
 
+char* checkSongObjByID(int id, fileObj& src);   // returns song name based on query by unique ID
+int checkSongObjIDByPar(int par, fileObj& src);   // returns song ID based on query by parent ID
+int checkSongObjParByID(int id, fileObj& src);   // returns song ParID based on query by ID
+
 #endif // FILEOBJ_H
--- beagletomb-0.1.6.orig/src/mysqlconn.h
+++ beagletomb-0.1.6/src/mysqlconn.h
@@ -28,16 +28,11 @@
 #include <iostream>
 #include <string>
 #include <string.h>
-#include "songObj.h"
 #include <QtSql>
 #include "fileobj.h"
 using namespace std;
 
-#define MAXART 1000
-#define MAXALB 1000
-#define MAXSONG 2000
-#define MAXVIDEO 1000
-#define MAXQRY 1000
+#define MAXQRY 100
 class mysqlconn {
 
 public:
--- beagletomb-0.1.6.orig/src/beaglemain.cpp
+++ beagletomb-0.1.6/src/beaglemain.cpp
@@ -73,11 +73,11 @@ void BeagleMain::Sync(int type){
         else{
             //// read from sql and fill songObjs
             readDB rDB(pref.getSQL().c_str());
-            Artist = rDB.ArtistFill(&artSize);
-            Album = rDB.AlbumFill(&albSize);
-            Song = rDB.SongFill(&songSize);
-            VidDir = rDB.VidDirFill(&vidDirSize);
-            Video = rDB.VideoFill(&vidSize);
+            Artist = rDB.ArtistFill(Artist);
+            Album = rDB.AlbumFill(Album);
+            Song = rDB.SongFill(Song);
+            VidDir = rDB.VidDirFill(VidDir);
+            Video = rDB.VideoFill(Video);
             /// read from sql and fill radio obj
             Radio = rDB.RadioFill(&radSize);
             Radio.setDB(pref.getSQL());
@@ -106,11 +106,11 @@ void BeagleMain::Sync(int type){
         pref.setInitDB();
         cout << "reading.... " << endl;
         /// read from sqlite to songObjs
-        Artist = rDB.ArtistFill(&artSize);
-        Album = rDB.AlbumFill(&albSize);
-        Song = rDB.SongFill(&songSize);
-        VidDir = rDB.VidDirFill(&vidDirSize);
-        Video = rDB.VideoFill(&vidSize);
+        Artist = rDB.ArtistFill(Artist);
+        Album = rDB.AlbumFill(Album);
+        Song = rDB.SongFill(Song);
+        VidDir = rDB.VidDirFill(VidDir);
+        Video = rDB.VideoFill(Video);
         /// read from sql and fill radio obj
         cout << "syncing radio" << endl;
         Radio = rDB.RadioFill(&radSize);
@@ -129,20 +129,20 @@ void BeagleMain::updateMenu(int type){
     m_Model = new QStringListModel(this);
     if(type == 1){
         /// update with artist
-        for(int i=0; i<= artSize; i++){
-            curMenu << Artist[i].getFile();
+        for(int i=0; i< Artist.getSize(); i++){
+            curMenu << Artist.getName(i);
         }
     }
     else if(type == 2){
         /// update with album
-        for(int i=0; i<= albSize; i++){
-            curMenu << Album[i].getFile();
+        for(int i=0; i< Album.getSize(); i++){
+            curMenu << Album.getName(i);
         }
     }
     else if(type == 3){
         /// update with directories
-        for(int i=0; i<=vidDirSize; i++){
-            curMenu << VidDir[i].getFile();
+        for(int i=0; i< VidDir.getSize(); i++){
+            curMenu << VidDir.getName(i);
         }
     }
 
@@ -164,12 +164,12 @@ void BeagleMain::updateAlbMenu(int selec
     QStringList curAlb;
     m_Model = new QStringListModel(this);
     curAlbID = new int[MAX];
-    selID = Artist[select].getFileID();    /// selected ID
+    selID = Artist.getID(select);    /// selected ID
 
-    for(int i=0; i<= albSize; i++){
-        if(Album[i].getFilePar() == selID ){
-            curAlb << Album[i].getFile();
-            curAlbID[albCount] = Album[i].getFileID();
+    for(int i=0; i< Album.getSize(); i++){
+        if(Album.getPar(i) == selID ){
+            curAlb << Album.getName(i);
+            curAlbID[albCount] = Album.getID(i);
             albCount++;
         }
     }
@@ -185,8 +185,8 @@ void BeagleMain::updateTitle(){
     t_Model = new QStringListModel(this);
     QStringList songList;
 
-    for(int i = 0; i<= songSize; i++){
-        songList << Song[i].getFile();
+    for(int i = 0; i<= Song.getSize(); i++){
+        songList << Song.getName(i);
     }
     t_Model->setStringList(songList);
     ui->TitleList->setModel(t_Model);
@@ -205,31 +205,31 @@ void BeagleMain::updateTitle(int selecte
     curSongID = new int[MAX];
     curVidID = new int[MAX];
     if(MenuMode == 3){     ///  if ALL ALBUM
-        selID = Album[selected].getFileID();
-        for(int i = 0; i<= songSize; i++){
-            if(Song[i].getFilePar() == selID){
-                curSong << Song[i].getFile();
-                curSongID[songCount] = Song[i].getFileID();
+        selID = Album.getID(selected);
+        for(int i = 0; i< Song.getSize(); i++){
+            if(Song.getPar(i) == selID){
+                curSong << Song.getName(i);
+                curSongID[songCount] = Song.getID(i);
                 songCount++;
             }
         }
     }
     else if(MenuMode == 4){    ////// if VIDEO DIR MODE
-        selID = VidDir[selected].getFileID();
-        for(int i = 0; i<= vidSize; i++){
-            if(Video[i].getFilePar() == selID){
-                curSong << Video[i].getFile();
-                curVidID[vidCount] = Video[i].getFileID();
+        selID = VidDir.getID(selected);
+        for(int i = 0; i<= Video.getSize(); i++){
+            if(Video.getPar(i) == selID){
+                curSong << Video.getName(i);
+                curVidID[vidCount] = Video.getID(i);
                 vidCount++;
             }
         }
     }
     else{   /// IF ALBUM DIR MODE
         selID = curAlbID[selected];
-        for(int i = 0; i<= songSize; i++){
-            if(Song[i].getFilePar() == selID){
-                curSong << Song[i].getFile();
-                curSongID[songCount] = Song[i].getFileID();
+        for(int i = 0; i<= Song.getSize(); i++){
+            if(Song.getPar(i) == selID){
+                curSong << Song.getName(i);
+                curSongID[songCount] = Song.getID(i);
                 songCount++;
             }
         }
@@ -287,11 +287,6 @@ void BeagleMain::PlaylistPlay(int selID)
 BeagleMain::~BeagleMain()
 {
     delete ui;
-    delete [] Artist;
-    delete [] Album;
-    delete [] Song;
-    delete [] Video;
-    delete [] VidDir;
 }
 
 /*
@@ -350,21 +345,21 @@ void BeagleMain::on_TitleList_doubleClic
 
     if(MenuMode == 2 || MenuMode == 3){
         selID = curSongID[selected];
-        FinSong = checkSongObjByID(selID, Song, songSize);
-        FinParentID = checkSongObjParByID(selID,Song, songSize);
-        FinParent = checkSongObjByID(FinParentID, Song, songSize);
+        FinSong = checkSongObjByID(selID, Song);
+        FinParentID = checkSongObjParByID(selID,Song);
+        FinParent = checkSongObjByID(FinParentID, Song);
     }
     else if(MenuMode == 4){
         selID = curVidID[selected];
-        FinSong = checkSongObjByID(selID, Video, vidSize);
-        FinParentID = checkSongObjParByID(selID,Video, vidSize);
-        FinParent = checkSongObjByID(FinParentID, Video, vidSize);
+        FinSong = checkSongObjByID(selID, Video);
+        FinParentID = checkSongObjParByID(selID,Video);
+        FinParent = checkSongObjByID(FinParentID, Video);
     }
     else{
-        selID = Song[selected].getFileID();
-        FinSong = checkSongObjByID(selID, Song, songSize);
-        FinParentID = checkSongObjParByID(selID,Song, songSize);
-        FinParent = checkSongObjByID(FinParentID, Song, songSize);
+        selID = Song.getID(selected);
+        FinSong = checkSongObjByID(selID, Song);
+        FinParentID = checkSongObjParByID(selID,Song);
+        FinParent = checkSongObjByID(FinParentID, Song);
     }
     // start song
     startSong(FinSong, selID);
@@ -483,15 +478,15 @@ void BeagleMain::on_ADD_but_clicked()
 
     if(MenuMode == 2 || MenuMode == 3){
          selID = curSongID[selected];
-      strBuffer=checkSongObjByID(selID, Song, songSize);
+      strBuffer=checkSongObjByID(selID, Song);
     }
     else if(MenuMode == 4){
          selID = curVidID[selected];
-       strBuffer=checkSongObjByID(selID, Video, vidSize);
+       strBuffer=checkSongObjByID(selID, Video);
     }
     else{
-        selID = Song[selected].getFileID();
-        strBuffer=checkSongObjByID(selID, Song, songSize);
+        selID = Song.getID(selected);
+        strBuffer=checkSongObjByID(selID, Song);
     }
     pl.AddTo(selID, strBuffer);
     RefillMainPL();
