Description: Upstream changes introduced in version 0.1.6-0ubuntu1~7
 This patch has been created by dpkg-source during the package build.
 Here's the last changelog entry, hopefully it gives details on why
 those changes were made:
 .
 beagletomb (0.1.6-0ubuntu1~7) natty; urgency=low
 .
   * Update: Fixed dynamic memory allocation, sync improved (Closes: #nnnn)
 .
 The person named in the Author field signed this changelog entry.
Author: Grant Hutchinson <h.g.utchinson@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- beagletomb-0.1.6.orig/beagletomb.pro
+++ beagletomb-0.1.6/beagletomb.pro
@@ -27,7 +27,8 @@ SOURCES += src/main.cpp\
     src/newplaylist.cpp \
     src/playlistobj.cpp \
     src/openplaylist.cpp \
-    src/radioObj.cpp
+    src/radioObj.cpp \
+    src/fileobj.cpp
 
 HEADERS  += src/beaglemain.h \
     src/sync.h \
@@ -56,7 +57,8 @@ HEADERS  += src/beaglemain.h \
     src/beaglemain.h \
     src/about.h \
     src/openplaylist.h \
-    src/radioObj.h
+    src/radioObj.h \
+    src/fileobj.h
 
 FORMS    += \
     src/prefdialog.ui \
--- beagletomb-0.1.6.orig/changelog
+++ beagletomb-0.1.6/changelog
@@ -1,5 +1,25 @@
+beagletomb (0.1.6-0ubuntu1~7) natty; urgency=low
+
+  * Update: Fixed dynamic memory allocation, sync improved (Closes: #nnnn)
+
+ -- Grant Hutchinson <h.g.utchinson@gmail.com>  Mon, 27 Mar 2012 18:59:22 -0500
+
+beagletomb (0.1.6-0ubuntu1) natty; urgency=low
+
+  * Update: fixed mediatomb mysql install/configure (Closes: #nnnn)
+  * Update: Added dynamic account creation (Closes: #nnnn)
+  * Update: changed sql cache to be more elegant and efficient (Closes: #nnnn)
+
+ -- Grant Hutchinson <h.g.utchinson@gmail.com>  Wed, 21 Mar 2012 18:59:22 -0500
+
+beagletomb (0.1.6-0ubuntu1) natty; urgency=low
+
+  * Update: changed sql cache to be more elegant and efficient (Closes: #nnnn)
+
+ -- Grant Hutchinson <h.g.utchinson@gmail.com>  Wed, 22 Feb 2012 18:59:22 -0500
+
 beagletomb (0.1.5-0ubuntu1) natty; urgency=low
 
-  * Initial release (Closes: #nnnn)  <nnnn is the bug number of your ITP>
+  * Initial release (Closes: #nnnn)
 
  -- Grant Hutchinson <h.g.utchinson@gmail.com>  Wed, 22 Feb 2012 18:59:22 -0500
--- beagletomb-0.1.6.orig/src/sync.cpp
+++ beagletomb-0.1.6/src/sync.cpp
@@ -70,9 +70,7 @@ int syncMe::control(const char *server,
     vidSize = 0, vidDirSize = 0;
 
     /// init Objects
-    songObj *Artist = NULL, *Album = NULL, *Song = NULL, *VidDir = NULL, *Video = NULL;
-    songObj *newSong, *newAlbum, *newArtist;
-    songObj *newVideo, *newVidDir;
+    fileObj Artist, Album, Song, VidDir, Video;
     //attempt to delete previous DB
     deleteDB(dbLocation);
 
@@ -85,30 +83,33 @@ int syncMe::control(const char *server,
     // get main artist menu
     artMenu = ms.connectArtMenu();
     vidDirMenu = ms.connectVidMenu();
-    // get from mysql each artist,album,song - store and return objects
-    newArtist = ms.connectArtist(Artist, artMenu, &artSize);
-    newAlbum = ms.connectAlbum(newArtist, &artSize, Album, &albSize);
-    newSong = ms.connectSong(newAlbum, &albSize, Song, &songSize);
-    newVidDir = ms.connectVidDir(VidDir, vidDirMenu, &vidDirSize);
-    newVideo = ms.connectVideo(newVidDir, &vidDirSize, Video, &vidSize);
+    // query mysql each artist,album,song,vidDir,video - store and return objects
+    Artist = ms.connectArtist(artMenu, Artist);
+    Album = ms.connectAlbum(Artist, Album);
+  //  Album.display();
+    Song = ms.connectSong(Album,Song);
+    VidDir = ms.connectVidDir(vidDirMenu,VidDir);
+    Video = ms.connectVideo(VidDir,Video);
+
     if(artMenu ==0){
         cout << "empty database or invalid login" << endl;
         return 0;
     }
     else{
     ///  sync artist,album,song objects to the local sql database
-    artistWrite(newArtist, artSize);
-    albumWrite(newAlbum, albSize);
-    songWrite(newSong, songSize);
-    vidDirWrite(newVidDir, vidDirSize);
-    videoWrite(newVideo, vidSize);
+    artistWrite(Artist);
+    albumWrite(Album);
+    songWrite(Song);
+    vidDirWrite(VidDir);
+    videoWrite(Video);
     return 1;
     }
 }
 
-void syncMe::artistWrite(songObj* Artist, int artSize){
+void syncMe::artistWrite(fileObj& Artist){
     int  pos = 0, posMax = 0, counter = 0, countRemind = 0;
-
+    int artSize =0;
+    artSize = Artist.getSize();
     string str2;
     counter = getMaxPos(artSize);
     posMax = counter;
@@ -117,21 +118,21 @@ void syncMe::artistWrite(songObj* Artist
         countRemind = 0;
         stringstream os;
         for (int i = pos; i <= posMax; i++) {
-            str2 = Artist[i].getFile();
+            str2 = Artist.getName(i);
 
             str2.erase(remove(str2.begin(), str2.end(), '\"'), str2.end());
-            Artist[i].setFile((char *)str2.c_str());
+            Artist.setName(i,(char *)str2.c_str());
             //           cout << str2 << endl;
             if (i != posMax && countRemind == 0) {
                 os << " INSERT INTO artists (Artist,ArtistID,ArtistPar) " <<
-                      "SELECT \"" << Artist[i].getFile() << "\" AS \"" << "Artist" << "\", \""
-                   <<  Artist[i].getFileID() << "\" AS \"" << "ArtistID" << "\", \""
-                   << Artist[i].getFilePar() << "\" AS \"" << "ArtistPar" << "\"";
+                      "SELECT \"" << Artist.getName(i) << "\" AS \"" << "Artist" << "\", \""
+                   <<  Artist.getID(i) << "\" AS \"" << "ArtistID" << "\", \""
+                   << Artist.getPar(i) << "\" AS \"" << "ArtistPar" << "\"";
                 //             cout << os;
                 countRemind++;
             }
             if (i != posMax && countRemind != 0) {
-                os << " UNION SELECT \""<< Artist[i].getFile()<<"\",\""<< Artist[i].getFileID()<<"\",\""<<Artist[i].getFilePar()<<"\"";
+                os << " UNION SELECT \""<< Artist.getName(i)<<"\",\""<< Artist.getID(i)<<"\",\""<<Artist.getPar(i)<<"\"";
 
             } else if (i == posMax && countRemind != 0) {
                 os << ";";
@@ -149,10 +150,12 @@ void syncMe::artistWrite(songObj* Artist
     }
 }
 
-void syncMe::albumWrite(songObj* Album, int albSize){
+void syncMe::albumWrite(fileObj& Album){
     int  pos = 0, posMax = 0, counter = 0, countRemind = 0;
-
+    int albSize = 0;
+    albSize = Album.getSize();
     string str2;
+
     counter = getMaxPos(albSize);
     posMax = counter;
 
@@ -160,21 +163,21 @@ void syncMe::albumWrite(songObj* Album,
         countRemind = 0;
         stringstream os;
         for (int i = pos; i <= posMax; i++) {
-            str2 = Album[i].getFile();
+            str2 = Album.getName(i);
 
             str2.erase(remove(str2.begin(), str2.end(), '\"'), str2.end());
-            Album[i].setFile((char *)str2.c_str());
+            Album.setName(i,(char *)str2.c_str());
             //         cout << str2 << endl;
             if (i != posMax && countRemind == 0) {
                 os << " INSERT INTO albums (Album,AlbumID,AlbumPar) " <<
-                      "SELECT \"" << Album[i].getFile() << "\" AS \"" << "Album" << "\", \""
-                   <<  Album[i].getFileID() << "\" AS \"" << "AlbumID" << "\", \""
-                   << Album[i].getFilePar() << "\" AS \"" << "AlbumPar" << "\"";
+                      "SELECT \"" << Album.getName(i) << "\" AS \"" << "Album" << "\", \""
+                   <<  Album.getID(i) << "\" AS \"" << "AlbumID" << "\", \""
+                   << Album.getPar(i) << "\" AS \"" << "AlbumPar" << "\"";
                 //           cout << os;
                 countRemind++;
             }
             if (i != posMax && countRemind != 0) {
-                os << " UNION SELECT \""<< Album[i].getFile()<<"\",\""<< Album[i].getFileID()<<"\",\""<<Album[i].getFilePar()<<"\"";
+                os << " UNION SELECT \""<< Album.getName(i)<<"\",\""<< Album.getID(i)<<"\",\""<<Album.getPar(i)<<"\"";
 
             } else if (i == posMax && countRemind != 0) {
                 os << ";";
@@ -191,9 +194,10 @@ void syncMe::albumWrite(songObj* Album,
         }
     }
 }
-void syncMe::songWrite(songObj* Song, int songSize){
+void syncMe::songWrite(fileObj& Song){
     int  pos = 0, posMax = 0, counter = 0, countRemind = 0;
-
+    int songSize = 0;
+    songSize = Song.getSize();
     string str2;
     counter = getMaxPos(songSize);
     posMax = counter;
@@ -202,21 +206,21 @@ void syncMe::songWrite(songObj* Song, in
         countRemind = 0;
         stringstream os;
         for (int i = pos; i <= posMax; i++) {
-            str2 = Song[i].getFile();
+            str2 = Song.getName(i);
 
             str2.erase(remove(str2.begin(), str2.end(), '\"'), str2.end());
-            Song[i].setFile((char *)str2.c_str());
+            Song.setName(i,(char *)str2.c_str());
             //         cout << str2 << endl;
             if (i != posMax && countRemind == 0) {
                 os << " INSERT INTO songs (Song,SongID,SongPar) " <<
-                      "SELECT \"" << Song[i].getFile() << "\" AS \"" << "Song" << "\", \""
-                   <<  Song[i].getFileID() << "\" AS \"" << "SongID" << "\", \""
-                   << Song[i].getFilePar() << "\" AS \"" << "SongPar" << "\"";
+                      "SELECT \"" << Song.getName(i) << "\" AS \"" << "Song" << "\", \""
+                   <<  Song.getID(i) << "\" AS \"" << "SongID" << "\", \""
+                   << Song.getPar(i) << "\" AS \"" << "SongPar" << "\"";
                 //           cout << os;
                 countRemind++;
             }
             if (i != posMax && countRemind != 0) {
-                os << " UNION SELECT \""<< Song[i].getFile()<<"\",\""<< Song[i].getFileID()<<"\",\""<<Song[i].getFilePar()<<"\"";
+                os << " UNION SELECT \""<< Song.getName(i)<<"\",\""<< Song.getID(i)<<"\",\""<<Song.getPar(i)<<"\"";
 
             } else if (i == posMax && countRemind != 0) {
                 os << ";";
@@ -234,9 +238,10 @@ void syncMe::songWrite(songObj* Song, in
     }
 }
 
-void syncMe::vidDirWrite(songObj* vidDir, int vidDirSize){
+void syncMe::vidDirWrite(fileObj& vidDir){
     int  pos = 0, posMax = 0, counter = 0, countRemind = 0;
-
+    int vidDirSize = 0;
+    vidDirSize = vidDir.getSize();
     string str2;
     counter = getMaxPos(vidDirSize);
     posMax = counter;
@@ -245,21 +250,21 @@ void syncMe::vidDirWrite(songObj* vidDir
         countRemind = 0;
         stringstream os;
         for (int i = pos; i <= posMax; i++) {
-            str2 = vidDir[i].getFile();
+            str2 = vidDir.getName(i);
 
             str2.erase(remove(str2.begin(), str2.end(), '\"'), str2.end());
-            vidDir[i].setFile((char *)str2.c_str());
+            vidDir.setName(i,(char *)str2.c_str());
             //       cout << str2 << endl;
             if (i != posMax && countRemind == 0) {
                 os << " INSERT INTO viddirs (VidDir,VidDirID,VidDirPar) " <<
-                      "SELECT \"" << vidDir[i].getFile() << "\" AS \"" << "VidDir" << "\", \""
-                   <<  vidDir[i].getFileID() << "\" AS \"" << "VidDirID" << "\", \""
-                   << vidDir[i].getFilePar() << "\" AS \"" << "VidDirPar" << "\"";
+                      "SELECT \"" << vidDir.getName(i) << "\" AS \"" << "VidDir" << "\", \""
+                   <<  vidDir.getID(i) << "\" AS \"" << "VidDirID" << "\", \""
+                   << vidDir.getPar(i) << "\" AS \"" << "VidDirPar" << "\"";
                 //          cout << os;
                 countRemind++;
             }
             if (i != posMax && countRemind != 0) {
-                os << " UNION SELECT \""<< vidDir[i].getFile()<<"\",\""<< vidDir[i].getFileID()<<"\",\""<<vidDir[i].getFilePar()<<"\"";
+                os << " UNION SELECT \""<< vidDir.getName(i)<<"\",\""<< vidDir.getID(i)<<"\",\""<<vidDir.getPar(i)<<"\"";
 
             } else if (i == posMax && countRemind != 0) {
                 os << ";";
@@ -278,9 +283,10 @@ void syncMe::vidDirWrite(songObj* vidDir
 }
 
 
-void syncMe::videoWrite(songObj* Video, int vidSize){
+void syncMe::videoWrite(fileObj& Video){
     int  pos = 0, posMax = 0, counter = 0, countRemind = 0;
-
+    int vidSize = 0;
+    vidSize = Video.getSize();
     string str2;
     counter = getMaxPos(vidSize);
     posMax = counter;
@@ -289,21 +295,21 @@ void syncMe::videoWrite(songObj* Video,
         countRemind = 0;
         stringstream os;
         for (int i = pos; i <= posMax; i++) {
-            str2 = Video[i].getFile();
+            str2 = Video.getName(i);
 
             str2.erase(remove(str2.begin(), str2.end(), '\"'), str2.end());
-            Video[i].setFile((char *)str2.c_str());
+            Video.setName(i,(char *)str2.c_str());
             //        cout << str2 << endl;
             if (i != posMax && countRemind == 0) {
                 os << " INSERT INTO videos (Video,VideoID,VideoPar) " <<
-                      "SELECT \"" << Video[i].getFile() << "\" AS \"" << "Video" << "\", \""
-                   <<  Video[i].getFileID() << "\" AS \"" << "VideoID" << "\", \""
-                   << Video[i].getFilePar() << "\" AS \"" << "VideoPar" << "\"";
+                      "SELECT \"" << Video.getName(i) << "\" AS \"" << "Video" << "\", \""
+                   <<  Video.getID(i) << "\" AS \"" << "VideoID" << "\", \""
+                   << Video.getPar(i) << "\" AS \"" << "VideoPar" << "\"";
                 //           cout << os;
                 countRemind++;
             }
             if (i != posMax && countRemind != 0) {
-                os << " UNION SELECT \""<< Video[i].getFile()<<"\",\""<< Video[i].getFileID()<<"\",\""<<Video[i].getFilePar()<<"\"";
+                os << " UNION SELECT \""<< Video.getName(i)<<"\",\""<< Video.getID(i)<<"\",\""<<Video.getPar(i)<<"\"";
 
             } else if (i == posMax && countRemind != 0) {
                 os << ";";
--- /dev/null
+++ beagletomb-0.1.6/src/fileobj.cpp
@@ -0,0 +1,107 @@
+#include "fileobj.h"
+
+fileObj::fileObj()
+{
+
+    objSize = 0;
+    InitSize = 0;
+    initFile(INITSIZE);
+}
+
+fileObj::fileObj(const fileObj &src){
+
+    if(src.objSize > 0){
+        objSize = 0;
+        delete [] fileName;
+        delete [] fileID;
+        delete [] filePar;
+        fileName = new string[src.objSize+1];
+        fileID = new int[src.objSize+1];
+        filePar = new int[src.objSize+1];
+        for(int i=0; i< src.objSize; i++){
+            set(i,src.fileID[i], src.filePar[i], src.fileName[i].c_str());
+        }
+        InitSize = src.InitSize;
+    }
+}
+
+void fileObj::initFile(int initSZ){
+    fileName = new string[initSZ];
+    fileID = new int[initSZ];
+    filePar = new int[initSZ];
+    InitSize = 0;
+    for(int i=0; i< initSZ; i++){
+        setInit(i, 0, 0, "-");
+    }
+}
+
+void fileObj::REinitFile(int oldsize, int newsize){
+    //set the new initialize size
+    InitSize = oldsize+newsize;
+    int tempObjSize = 0;
+    string *nameCopy;
+    int *idCopy, *parCopy;
+    nameCopy = new string[objSize+1];
+    parCopy = new int[objSize+1];
+   idCopy = new int[objSize+1];
+
+    for(int i=0; i< objSize; i++){
+        nameCopy[i] = "-";
+        parCopy[i]= 0;
+        idCopy[i] = 0;
+    }
+
+    for(int i=0; i< objSize-4; i++){
+        nameCopy[i] = fileName[i];
+        parCopy[i] = filePar[i];
+        idCopy[i] = fileID[i];
+    }
+      initFile(InitSize);
+   /// refill array fileName fileID filePar array
+
+      tempObjSize = objSize;
+      objSize = 0;
+   for(int i=0; i< tempObjSize; i++){
+        set(i,idCopy[i], parCopy[i], nameCopy[i].c_str());
+    }
+
+}
+
+
+fileObj::~fileObj(){
+        delete [] fileName;
+        delete [] fileID;
+        delete [] filePar;
+}
+
+void fileObj::display(){
+    cout << "obj size is " << objSize << endl;
+    for(int i=0; i< objSize; i++){
+        cout << " Num: " << i
+             << " ID: " << getID(i)
+             << " PAR: " << getPar(i)
+             << " NAME: " << getName(i) << endl;
+    }
+}
+
+fileObj& fileObj::operator=(const fileObj& src){
+
+    if(this != &src){
+        if(src.objSize > 0){
+            objSize = 0;
+            delete [] fileName;
+            delete [] fileID;
+            delete [] filePar;
+            fileName = new string[src.objSize+1];
+            fileID = new int[src.objSize+1];
+            filePar = new int[src.objSize+1];
+            for(int i=0; i< src.objSize-1; i++){
+                set(i,src.fileID[i], src.filePar[i], src.fileName[i].c_str());
+            }
+            objSize = src.objSize;
+            InitSize = src.InitSize;
+        }
+    }
+     return *this;
+
+}
--- beagletomb-0.1.6.orig/src/mysqlconn.cpp
+++ beagletomb-0.1.6/src/mysqlconn.cpp
@@ -32,69 +32,48 @@ mysqlconn::mysqlconn(const char *server,
     db.setPassword(pass);
 }
 
-songObj* mysqlconn::connectAlbum(songObj* Artist, int *artSize, songObj* Album, int *albSize){
-    bool Myexit = false;
-    int albCount = 0;
-    int QryCount = 0;
-    char *myQry = NULL;
-    int albQryCount = 0;
-    int curID;
-
-    *albSize = MAXSONG;
-    Album = new songObj[MAXALB];
-
-    for(int i= 0 ; i <= MAXALB; i++){
-        Album[i].set("-", 0, 0);
-    }
-
-    while(Myexit != true){
+fileObj& mysqlconn::connectAlbum(fileObj& Artist, fileObj& Album){
+     cout << "artists:: " << Artist.getSize() << endl;
+    bool Exit = false;
+    int curID = 0;          /// current ID of query
+    char *myQry = NULL;     /// string for final query
+    int albCount = 0;      /// counter for number of album items
+    int qryCount = 0;      /// counter for number of queries
 
-	if (!myQry) {
+    while(!Exit){
+        if(!myQry){
             myQry = new char[MAXQRY];
-	}
-        curID = Artist[QryCount].getFileID();
+        }
+        curID = Artist.getID(qryCount);
         if(curID == 0){
-            Myexit = 1;
+            Exit = 1;
         }
-
-
-        sprintf(myQry, "SELECT * FROM mt_cds_object WHERE parent_id = %d",
-                curID );
-
-        // connect to the mysql database
+        sprintf(myQry, "SELECT * FROM mt_cds_object WHERE parent_id = %d", curID );
 
         if(db.open()){
-        QSqlQuery query(db);
-        query = QString(myQry);
-
-        while (query.next()){
-
-
-            QString QVal = query.value(0).toString();
-            QString QVal1 = query.value(1).toString();
-            QString QVal2 = query.value(2).toString();
-            QString QVal3 = query.value(3).toString();
-            QString QVal4 = query.value(4).toString();
-            QString QVal5 = query.value(5).toString();
-
-            ///////*****  Query for Album rows using artist
-            if(QVal4.toStdString().compare("object.container.album.musicAlbum") == 0){
-                if (QVal2.toInt() == curID) {
-                    albCount++;
-                    string Qstr5Convert = QVal5.toStdString();
-                    char *QVal5Convert;
-                    QVal5Convert = new char[Qstr5Convert.length() + 1];
-                    strcpy(QVal5Convert, Qstr5Convert.c_str());
-                    Album[albCount].set(QVal5Convert, QVal.toInt(), QVal2.toInt());
+            QSqlQuery query(db);
+            query = QString(myQry);
+            while(query.next()){
+                QString QVal = query.value(0).toString();
+                QString QVal1 = query.value(1).toString();
+                QString QVal2 = query.value(2).toString();
+                QString QVal3 = query.value(3).toString();
+                QString QVal4 = query.value(4).toString();
+                QString QVal5 = query.value(5).toString();
+
+                ///////*****  Query for Album rows using artist
+                if(QVal4.toStdString().compare("object.container.album.musicAlbum") == 0){
+                    if (QVal2.toInt() == curID) {
+                        Album.set(albCount, QVal.toInt(), QVal2.toInt(), QVal5.toStdString().c_str());
+                         albCount++;
+                    }
                 }
             }
-        }
-        *albSize = albCount;
-        QryCount++;
-        if (QryCount == *artSize) {
-            Myexit = true;
-        }
-         db.close();
+            qryCount++;
+            if (qryCount == Artist.getSize()-1) {
+                Exit = true;
+            }
+            db.close();
         }
         else{
             cout << "error couldn't connect to mysql" << endl;
@@ -103,261 +82,192 @@ songObj* mysqlconn::connectAlbum(songObj
     return Album;
 }
 
-songObj* mysqlconn::connectSong(songObj* Album, int *albSize, songObj* Song, int *songSize){
 
-    int songCount = 0;
-    int QryCount = 0;
-    char *myQry = NULL;
-    int curID = 0;
-    bool Myexit = false;
 
-    *songSize = MAXSONG;
-    Song = new songObj[MAXSONG];
-
-    for(int i= 0 ; i <= MAXSONG; i++){
-        Song[i].set("-", 0, 0);
-    }
+fileObj& mysqlconn::connectSong(fileObj& Album, fileObj& Song){
+    cout << "albums: " << Album.getSize() << endl;
+    bool Exit = false;
+    int curID = 0;          /// current ID of query
+    char *myQry = NULL;     /// string for final query
+    int songCount = 0;      /// counter for number of album items
+    int qryCount = 0;      /// count for number of queries
 
-
-    while (Myexit != true){
-
-
-	if (!myQry) {
+    while(!Exit){
+        if(!myQry){
             myQry = new char[MAXQRY];
         }
-
-	curID = Album[QryCount+1].getFileID();
-	if(curID == 0){
-            Myexit = true;
+        curID = Album.getID(qryCount);
+        if(curID == 0){
+            Exit = 1;
         }
+        sprintf(myQry, "SELECT * FROM mt_cds_object WHERE parent_id = %d", curID );
 
-
-        sprintf(myQry, "SELECT * FROM mt_cds_object WHERE parent_id = %d",
-                curID);
         if(db.open()){
-        QSqlQuery query(db);
-        query = QString(myQry);
-
-        while (query.next()){
-
-
-            QString QVal = query.value(0).toString();
-            QString QVal1 = query.value(1).toString();
-            QString QVal2 = query.value(2).toString();
-            QString QVal3 = query.value(3).toString();
-            QString QVal4 = query.value(4).toString();
-            QString QVal5 = query.value(5).toString();
+            QSqlQuery query(db);
+            query = QString(myQry);
+            while(query.next()){
+                QString QVal = query.value(0).toString();
+                QString QVal1 = query.value(1).toString();
+                QString QVal2 = query.value(2).toString();
+                QString QVal3 = query.value(3).toString();
+                QString QVal4 = query.value(4).toString();
+                QString QVal5 = query.value(5).toString();
 
+                ///////*****  Query for Songs
+                if (QVal2.toInt() == curID) {
+                    Song.set(songCount, QVal.toInt(), QVal2.toInt(), QVal5.toStdString().c_str());
+                     songCount++;
+                }
 
-            ///////*****  Query for Songs
-            if (QVal2.toInt() == curID) {
-                songCount++;
-                string QstrConvert = QVal5.toStdString();
-                char *QVal5Convert;
-                QVal5Convert = new char[QstrConvert.length() + 1];
-                strcpy(QVal5Convert, QstrConvert.c_str());
-                Song[songCount].set(QVal5Convert, QVal.toInt(), QVal2.toInt());
             }
+            qryCount++;
+            if (qryCount == Album.getSize()-1) {
+                Exit = true;
+            }
+            db.close();
         }
-
-        *songSize = songCount;
-        QryCount++;
-        if (QryCount == *albSize) {
-            Myexit = true;
-        }
-        db.close();
+        else{
+            cout << "error couldn't connect to mysql" << endl;
         }
     }
+     cout << "songs: " << Song.getSize() << endl;
     return Song;
 }
-songObj* mysqlconn::connectArtist(songObj* Artist, int artMenu, int *mySize){
-
-
-    int artCount = 0;
-    *mySize = MAXART;
-    Artist = new songObj[MAXART];
-
-    for(int i= 0 ; i <= MAXART; i++){
-        Artist[i].set("-", 0, 0);
-    }
 
+fileObj& mysqlconn::connectArtist(int artMenu, fileObj& Artist){
 
+    int curID = 0;          /// current ID of query
+    char *myQry = NULL;     /// string for final query
+    int artCount = 0;      /// counter for number of Artist items
 
-    char *myQry = NULL;
+        if(!myQry){
+            myQry = new char[MAXQRY];
+        }
 
-    if (!myQry) {
-        myQry = new char[MAXQRY];
-    }
+        sprintf(myQry, "SELECT * FROM mt_cds_object WHERE parent_id = %d", artMenu );
 
-    /// use artist menu ID  to get artists
+        if(db.open()){
+            QSqlQuery query(db);
+            query = QString(myQry);
 
-    sprintf(myQry, "SELECT * FROM mt_cds_object WHERE parent_id = %d",
-            artMenu);
+            while(query.next()){
+                QString QVal = query.value(0).toString();
+                QString QVal1 = query.value(1).toString();
+                QString QVal2 = query.value(2).toString();
+                QString QVal3 = query.value(3).toString();
+                QString QVal4 = query.value(4).toString();
+                QString QVal5 = query.value(5).toString();
+                ///////*****  Query for MAIN root menu
+                if (QVal2.toInt() == artMenu) {
+                    Artist.set(artCount, QVal.toInt(), QVal2.toInt(), QVal5.toStdString().c_str());
+                    artCount++;
+                }
 
-    if(!db.open()){
-        cout << "error couldn't connect to mysql" << endl;
-    }
-    else{
-    QSqlQuery query(db);
-    query = QString(myQry);
-
-    while (query.next()){
-
-    QString QVal = query.value(0).toString();
-    QString QVal1 = query.value(1).toString();
-    QString QVal2 = query.value(2).toString();
-    QString QVal3 = query.value(3).toString();
-    QString QVal4 = query.value(4).toString();
-    QString QVal5 = query.value(5).toString();
-
-        ///////*****  Query for MAIN root menu
-        if (QVal2.toInt() == artMenu) {
-            string Qstr5Convert = QVal5.toStdString();
-            char *QVal5Convert;
-            QVal5Convert = new char[Qstr5Convert.length() + 1];
-            strcpy(QVal5Convert, Qstr5Convert.c_str());
-            Artist[artCount].set(QVal5Convert, QVal.toInt(), QVal2.toInt());
-            artCount++;
+            }
+           db.close();
+        }
+        else{
+            cout << "error couldn't connect to mysql" << endl;
         }
-    }
-
-    *mySize = artCount;
-    db.close();
-    }
-
     return Artist;
 }
 
-songObj* mysqlconn::connectVideo(songObj* VidDir, int *vidDirSize, songObj* Video, int *vidSize){
+fileObj& mysqlconn::connectVideo(fileObj& VidDir, fileObj& Video){
+ cout << "Video Directories: " << VidDir.getSize() << endl;
+    bool Exit = false;
+    int curID = 0;          /// current ID of query
+    char *myQry = NULL;     /// string for final query
+    int VidCount = 0;      /// counter for number of video items
+    int qryCount = 0;      /// count for number of queries
 
-    int VidCount = 0;
+    while(!Exit){
 
-
-    int QryCount = 0;
-    char *myQry = NULL;
-    int curID = 0;
-    bool Myexit = false;
-
-    *vidSize = MAXVIDEO;
-    Video = new songObj[MAXVIDEO];
-
-    for(int i= 0 ; i <= MAXVIDEO; i++){
-        Video[i].set("-", 0, 0);
-    }
-
-    while (Myexit != true){
-
-
-        if (!myQry) {
+        if(!myQry){
             myQry = new char[MAXQRY];
         }
-
-
-        curID = VidDir[QryCount+1].getFileID();
+        curID = VidDir.getID(qryCount);
         if(curID == 0){
-            Myexit = true;
+            Exit = 1;
         }
+        sprintf(myQry, "SELECT * FROM mt_cds_object WHERE parent_id = %d", curID );
 
-
-        sprintf(myQry, "SELECT * FROM mt_cds_object WHERE parent_id = %d",
-                curID);
         if(db.open()){
-        QSqlQuery query(db);
-        query = QString(myQry);
+            QSqlQuery query(db);
+            query = QString(myQry);
 
-        while (query.next()){
+            while(query.next()){
+                QString QVal = query.value(0).toString();
+                QString QVal1 = query.value(1).toString();
+                QString QVal2 = query.value(2).toString();
+                QString QVal3 = query.value(3).toString();
+                QString QVal4 = query.value(4).toString();
+                QString QVal5 = query.value(5).toString();
 
+                ///////*****  Query for Videos
 
-            QString QVal = query.value(0).toString();
-            QString QVal1 = query.value(1).toString();
-            QString QVal2 = query.value(2).toString();
-            QString QVal3 = query.value(3).toString();
-            QString QVal4 = query.value(4).toString();
-            QString QVal5 = query.value(5).toString();
-            ///////*****  Query for Songs
+                if (QVal2.toInt() == curID) {
+                    Video.set(VidCount,QVal.toInt(), QVal2.toInt(),  QVal5.toStdString().c_str());
+                    VidCount++;
+                }
 
-            if (QVal2.toInt() == curID) {
-                VidCount++;
-                string Qstr5Convert = QVal5.toStdString();
-                char *QVal5Convert;
-                QVal5Convert = new char[Qstr5Convert.length() + 1];
-                strcpy(QVal5Convert, Qstr5Convert.c_str());
-                Video[VidCount].set(QVal5Convert, QVal.toInt(), QVal2.toInt());
             }
-        }
-
-        *vidSize = VidCount;
-        QryCount++;
-        if (QryCount == *vidDirSize) {
-            Myexit = true;
-        }
-
-        db.close();
+            qryCount++;
+            if (qryCount == VidDir.getSize()-1) {
+                Exit = true;
+            }
+            db.close();
         }
         else{
-            cout << "error couldn't to mysql" << endl;
-              Myexit = true;
+            cout << "error couldn't connect to mysql" << endl;
         }
     }
+     cout << "videos: " << Video.getSize() << endl;
     return Video;
 }
 
+fileObj& mysqlconn::connectVidDir(int vidMenu, fileObj& VidDir){
 
+    int curID = 0;          /// current ID of query
+    char *myQry = NULL;     /// string for final query
+    int VidDirCount = 0;      /// counter for number of video directory items
+    int qryCount = 0;      /// count for number of queries
 
-songObj* mysqlconn::connectVidDir(songObj* VidDir, int vidMenu, int *vidDirSize){
-
-    int VidDirCount = 0;
+        if(!myQry){
+            myQry = new char[MAXQRY];
+        }
 
-    *vidDirSize = MAXVIDEO;
-    VidDir = new songObj[MAXVIDEO];
+        sprintf(myQry, "SELECT * FROM mt_cds_object WHERE parent_id = %d", vidMenu );
 
-    for(int i= 0 ; i <= MAXVIDEO; i++){
-        VidDir[i].set("-", 0, 0);
-    }
-
-    char *myQry = NULL;
+        if(db.open()){
+            QSqlQuery query(db);
+            query = QString(myQry);
 
-    if (!myQry) {
-        myQry = new char[MAXQRY];
-    }
+            while(query.next()){
+                QString QVal = query.value(0).toString();
+                QString QVal1 = query.value(1).toString();
+                QString QVal2 = query.value(2).toString();
+                QString QVal3 = query.value(3).toString();
+                QString QVal4 = query.value(4).toString();
+                QString QVal5 = query.value(5).toString();
+
+                ///////*****  Query for Vid Dir
+                if (QVal2.toInt() == vidMenu) {
+                    VidDir.set(VidDirCount, QVal.toInt(), QVal2.toInt(), QVal5.toStdString().c_str());
+                    VidDirCount++;
+                }
 
-    /// use video menu ID  to get vid directory
+            }
 
-    sprintf(myQry, "SELECT * FROM mt_cds_object WHERE parent_id = %d",
-            vidMenu);
-    if(db.open()){
-    QSqlQuery query(db);
-    query = QString(myQry);
-
-    while (query.next()){
-
-
-        QString QVal = query.value(0).toString();
-        QString QVal1 = query.value(1).toString();
-        QString QVal2 = query.value(2).toString();
-        QString QVal3 = query.value(3).toString();
-        QString QVal4 = query.value(4).toString();
-        QString QVal5 = query.value(5).toString();
-        ///////*****  Query for MAIN root menu
-        if (QVal2.toInt() == vidMenu) {
-            string Qstr5Convert = QVal5.toStdString();
-            char *QVal5Convert;
-            QVal5Convert = new char[Qstr5Convert.length() + 1];
-            strcpy(QVal5Convert, Qstr5Convert.c_str());
-            VidDir[VidDirCount].set(QVal5Convert, QVal.toInt(), QVal2.toInt());
-            VidDirCount++;
+            db.close();
+        }
+        else{
+            cout << "error couldn't connect to mysql" << endl;
         }
-    }
-
-    *vidDirSize = VidDirCount;
-    db.close();
-    }
-    else{
-        cout << "error couldn't connect to vid dir in mysql" << endl;
-    }
     return VidDir;
 }
 
+
+
 int mysqlconn::connectVidMenu(){
     int vidMenuID = 0, vidDirMenuID = 0, vidMenu = 0;
 
@@ -387,38 +297,38 @@ int mysqlconn::connectVidMenu(){
         }
 
         if(db.open()){
-        QSqlQuery query(db);
-        query = QString(myQry);
-        rowCount = 0;
-        while (query.next()){
+            QSqlQuery query(db);
+            query = QString(myQry);
+            rowCount = 0;
+            while (query.next()){
+
+                QString QVal = query.value(0).toString();
+                QString QVal1 = query.value(1).toString();
+                QString QVal2 = query.value(2).toString();
+                QString QVal3 = query.value(3).toString();
+                QString QVal4 = query.value(4).toString();
+                QString QVal5 = query.value(5).toString();
 
-            QString QVal = query.value(0).toString();
-            QString QVal1 = query.value(1).toString();
-            QString QVal2 = query.value(2).toString();
-            QString QVal3 = query.value(3).toString();
-            QString QVal4 = query.value(4).toString();
-            QString QVal5 = query.value(5).toString();
+                if (QVal2.toInt() == 0 && rowCount == 3){
+                    vidMenuID = QVal.toInt();
+                }
 
-            if (QVal2.toInt() == 0 && rowCount == 3){
-                vidMenuID = QVal.toInt();
-            }
+                if(QVal2.toInt() == vidMenuID && rowCount == 1){
+                    vidDirMenuID = QVal.toInt();
+                }
+                rowCount++;
 
-            if(QVal2.toInt() == vidMenuID && rowCount == 1){
-                vidDirMenuID = QVal.toInt();
             }
-            rowCount++;
-
-        }
-        QryCount++;
-        if (QryCount > 2) { // + albCount
-            Myexit = true;
-        }
-        db.close();
+            QryCount++;
+            if (QryCount > 2) { // + albCount
+                Myexit = true;
+            }
+            db.close();
 
         }
         else{
             cout << "error couldn't connect to vid menu in mysql" << endl;
-              Myexit = true;
+            Myexit = true;
         }
     }
     return vidDirMenuID;
@@ -450,43 +360,43 @@ int mysqlconn::connectArtMenu() {
                     audMenuID);
         }
         if(db.open()){
-        QSqlQuery query(db);
-        query = QString(myQry);
-        while (query.next()){
-
-            QString QVal = query.value(0).toString();
-            QString QVal1 = query.value(1).toString();
-            QString QVal2 = query.value(2).toString();
-            QString QVal3 = query.value(3).toString();
-            QString QVal4 = query.value(4).toString();
-            QString QVal5 = query.value(5).toString();
-            ///////*****  Query for MAIN root menu
-            if (QVal2.toInt() == 0 && QryCount == 0) {
-                menu++;
-                if (menu == 1) {
-                    audMenuID = QVal.toInt();
+            QSqlQuery query(db);
+            query = QString(myQry);
+            while (query.next()){
+
+                QString QVal = query.value(0).toString();
+                QString QVal1 = query.value(1).toString();
+                QString QVal2 = query.value(2).toString();
+                QString QVal3 = query.value(3).toString();
+                QString QVal4 = query.value(4).toString();
+                QString QVal5 = query.value(5).toString();
+                ///////*****  Query for MAIN root menu
+                if (QVal2.toInt() == 0 && QryCount == 0) {
+                    menu++;
+                    if (menu == 1) {
+                        audMenuID = QVal.toInt();
+                    }
                 }
-            }
 
-            //check for Audio menus
-            else if (QVal2.toInt() == audMenuID) {
-                artMenu++;
-                //set ID of artist sub Menu
-                if (artMenu == 4) {
-                    artMenuID = QVal.toInt();
+                //check for Audio menus
+                else if (QVal2.toInt() == audMenuID) {
+                    artMenu++;
+                    //set ID of artist sub Menu
+                    if (artMenu == 4) {
+                        artMenuID = QVal.toInt();
+                    }
                 }
-            }
 
-        }
-        QryCount++;
-        if (QryCount > 3) { // + albCount
-            Myexit = true;
-        }
-        db.close();
+            }
+            QryCount++;
+            if (QryCount > 3) { // + albCount
+                Myexit = true;
+            }
+            db.close();
         }
         else{
             cout << "error couldn't connect to mysql" << endl;
-              Myexit = true;
+            Myexit = true;
         }
     }
     return artMenuID;
@@ -494,5 +404,4 @@ int mysqlconn::connectArtMenu() {
 
 mysqlconn::~mysqlconn() {
 
-
 }
--- /dev/null
+++ beagletomb-0.1.6/src/fileobj.h
@@ -0,0 +1,91 @@
+#ifndef FILEOBJ_H
+#define FILEOBJ_H
+
+#define INITSIZE 100
+#include <stdlib.h>
+#include <stdio.h>
+#include <iostream>
+#include <cstring>
+using namespace std;
+class fileObj
+{
+public:
+
+    string *fileName;    // Item name
+    int *fileID;         // Item Identification number
+    int *filePar;       // Item Parent number
+    int objSize;        // Number of Items
+    int InitSize;       // Number size before reallocate
+
+    fileObj();
+    fileObj(const fileObj& src);
+    fileObj& operator=(const fileObj& src);
+
+    void initFile(int initSZ);
+    void REinitFile(int oldsize, int newsize);
+    void display();
+    ~fileObj();
+
+    void setName(int item, const char *name){
+        if(item >= 0 && item <= objSize){
+            fileName[item] = name;
+        }
+    }
+    void setID(int item, int newID){
+       if(item >= 0 && item <= objSize){
+            /// fill with new entry
+            fileID[item] = newID;
+       }
+    }
+    void setPar(int item, int newPar){
+       if(item >= 0 && item <= objSize){
+
+            /// fill with new entry
+            filePar[item] = newPar;
+       }
+    }
+    void set(int item, int newid, int newpar, const char *newname){
+        if (objSize >= InitSize-1){
+            REinitFile(InitSize, 1000);
+        }
+        setID(item, newid);
+        setPar(item, newpar);
+        setName(item, newname);
+        objSize++;
+    }
+    void setInit(int item, int newid, int newpar, const char *newname){
+        setID(item, newid);
+        setPar(item, newpar);
+        setName(item, newname);
+        InitSize++;
+    }
+    int getID(int item){
+        return fileID[item];
+    }
+    int getPar(int item){
+        return filePar[item];
+    }
+    char *getName(int item){
+        char *final;
+        final = new char[fileName[item].length()+1];
+        strcpy(final, fileName[item].c_str());
+        return final;
+    }
+    int getSize(){
+        return objSize;
+    }
+    void setInit(int initItem){
+        InitSize = initItem;
+    }
+    int getInit(){
+        return InitSize;
+    }
+
+
+    void delFileName(){
+        objSize = 0;
+        delete [] fileName;
+    }
+};
+
+#endif // FILEOBJ_H
--- beagletomb-0.1.6.orig/src/mysqlconn.h
+++ beagletomb-0.1.6/src/mysqlconn.h
@@ -30,24 +30,34 @@
 #include <string.h>
 #include "songObj.h"
 #include <QtSql>
-
+#include "fileobj.h"
 using namespace std;
 
-#define MAXART 10000
-#define MAXALB 10000
-#define MAXSONG 20000
-#define MAXVIDEO 10000
+#define MAXART 1000
+#define MAXALB 1000
+#define MAXSONG 2000
+#define MAXVIDEO 1000
 #define MAXQRY 1000
 class mysqlconn {
 
 public:
         QSqlDatabase db;
 	mysqlconn(const char *server, const char* user, const char *pass, const char *database);
+
+        fileObj& connectArtist(int artMenu, fileObj& Artist);
+        fileObj& connectAlbum(fileObj& Artist, fileObj& Album);
+        fileObj& connectSong(fileObj& Album, fileObj& Song);
+        fileObj& connectVidDir(int vidMenu, fileObj& VidDir);
+        fileObj& connectVideo(fileObj& VidDir, fileObj& Video);
+
+
+        /*
 	songObj* connectArtist(songObj* Artist, int artMenu, int *mySize);
 	songObj* connectSong(songObj* Album, int *albSize, songObj* Song, int *songSize);
 	songObj* connectAlbum(songObj* Artist, int *artSize, songObj* Album, int *albSize);
         songObj* connectVidDir(songObj* VidDir, int vidDirMenu, int *vidDirSize);
         songObj* connectVideo(songObj* VidDir, int *vidDirSize, songObj* Video, int *vidSize);
+        */
         int connectVidMenu();
         int connectArtMenu();
         void display(ostream& os, int pos);
--- beagletomb-0.1.6.orig/src/sync.h
+++ beagletomb-0.1.6/src/sync.h
@@ -39,6 +39,7 @@
 #include "songObj.h"
 #include "radioObj.h"
 #include "mysqlconn.h"
+#include "fileobj.h"
 
 #define TEMPSYNCPREF "/.BeagleTomb/BTmedia.db"
 
@@ -52,22 +53,22 @@ public:
 
         syncMe(const char *server, const char *user, const char *pass, const char *table, const char *dbLocation);
 
-        void videoWrite(songObj* Song, int songSize);
+        void videoWrite(fileObj& Video);
 
-        void vidDirWrite(songObj* Song, int songSize);
+        void vidDirWrite(fileObj& VidDir);
 
-        void songWrite(songObj* Song, int songSize);
+        void songWrite(fileObj& Song);
 
-        void albumWrite(songObj* Album, int albSize);
+        void albumWrite(fileObj& Album);
 
-        void artistWrite(songObj* Artist, int artSize);
+        void artistWrite(fileObj& Artist);
 
         void writeMe(string qry);;
 
         int getMaxPos(int count);
         void sendToShell();
         void RemoveTMP();
-	void display(songObj* Artist, int *artSize, songObj* Album, int *albSize, songObj *Song, int *songSize);
+        void display(songObj* Artist, int *artSize, songObj* Album, int *albSize, songObj *Song, int *songSize);
 	void deleteDB(const char *dbLocation);
 	void createDB(const char *dbLocation);
         void OpenDB();
